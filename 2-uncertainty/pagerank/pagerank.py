import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    
    all_pages = corpus.keys()

    page_distribution = {k:0 for k in all_pages} # setting initial probability distribution to 0

    num_all_pages = len(list(all_pages))
    remainder_dist = (1 - damping_factor) / num_all_pages # probability that a random link is chosen from all pages in the corpus

    page_distribution = {k:remainder_dist for k in page_distribution.keys()}

    # splitting damping factor with links in page 
    # current page (if no outgoing links, return a probability distribution that chooses randomly among all pages with equal prob)
    page_outgoing = list(corpus[page])
    current_page = page_outgoing if len(page_outgoing) > 0 else all_pages
    num_links = len(current_page) # number of links in page
    damping_dist = damping_factor / num_links 

    # updates probability distribution based on damping factor
    for c in current_page: 
        page_distribution[c] += damping_dist

    # normalizing distribution values
    dist_sum = sum(list(page_distribution.values()))
    page_distribution = {k:v/dist_sum for k,v in page_distribution.items()}

    return page_distribution



def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """

    pages = list(corpus.keys()) # list of all pages in the corpus
    
    population = [p for p in range(len(pages))] # pages 
    weights = list() # probability distribution based on transition model

    # keeps track of number of appearances
    appearances = {k:0 for k in corpus.keys()}

    for i in range(n):
        
        # selects a page: chooses a random page at first iteration, chooses a page based on weights generated by transition model
        page_index = random.randint(0, len(corpus) - 1) if i == 0 else random.choices(population, weights)[0]
        selected_page = pages[page_index]
        appearances[selected_page] += 1 # appends to the number of times a page was chosen 

        dist = transition_model(corpus, selected_page, damping_factor)
        weights = list(dist.values())

    # normalizing distribution values
    dist_sum = sum(list(appearances.values()))
    page_distribution = {k:v/dist_sum for k,v in appearances.items()}

    return page_distribution

def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    all_pages = corpus.keys()
    num_pages = len(list(all_pages))
    init_dist = 1 / num_pages
    
    page_distribution = {k:init_dist for k in all_pages} # setting initial probability distribution w/ equal weights

    while True: 

        max_delta = 0 # tracks max change
        for p in all_pages: 

            previous_dist = page_distribution[p] # previous probability distribution

            sec_1 = (1 - damping_factor) / num_pages # (1 - d) / N where: d=damping_factor, N=num_pages
            
            possible_sources = [j for j in all_pages if p in corpus[j]]
            
            source_sum = 0
            for source in possible_sources: 

                pr_i = page_distribution[source] # page rank of the source
                n = len(list(corpus[source]))

                result = pr_i / n #(PR(i) / NumLinks(i)) where: pr_i=PR(i), n=NumLinks(i)
                source_sum += result
                
            sec_2 = damping_factor * source_sum
            pr_p = sec_1 + sec_2

            # PageRank for Page p
            page_distribution[p] = pr_p

        # normalize values 
        dist_sum = sum(list(page_distribution.values()))
        page_distribution = {k:v/dist_sum for k,v in page_distribution.items()}

        # get the delta
        for p in page_distribution.keys():
            dist_delta = abs(page_distribution[p] - previous_dist)
            max_delta = dist_delta if dist_delta > max_delta else dist_delta

        
        if max_delta <= 0.001:
            # normalize values 
            return page_distribution



if __name__ == "__main__":
    main()
